package net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.spartan

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.minecraft.network.play.client.CPacketKeepAlive
import net.minecraft.network.play.client.CPacketConfirmTransaction
class SpartanCombatDisabler : DisablerMode("SpartanCombat") {

    private val msTimer = MSTimer()

    private val keepAlives = arrayListOf<CPacketKeepAlive>()
    private val transactions = arrayListOf<CPacketConfirmTransaction>()

    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (msTimer.hasTimePassed(3000L) && keepAlives.size > 0 && transactions.size > 0) {
            PacketUtils.sendPacketNoEvent(keepAlives[keepAlives.size - 1])
            PacketUtils.sendPacketNoEvent(transactions[transactions.size - 1])
            disabler.debugMessage("c00 no.${keepAlives.size - 1} sent.")
            disabler.debugMessage("c0f no.${transactions.size - 1} sent.")
            keepAlives.clear()
            transactions.clear()
            msTimer.reset()
        }
        if (packet is CPacketKeepAlive && (keepAlives.size <= 0 || packet != keepAlives[keepAlives.size - 1])) {
            disabler.debugMessage("c00 added")
            keepAlives.add(packet)
            event.cancelEvent()
        }
        if (packet is CPacketConfirmTransaction && (transactions.size <= 0 || packet != transactions[transactions.size - 1])) {
            disabler.debugMessage("c0f added")
            transactions.add(packet)
            event.cancelEvent()
        }
    }

}