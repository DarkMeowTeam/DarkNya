package net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.DisablerMode
import net.ccbluex.liquidbounce.features.value.BoolValue
import net.minecraft.entity.Entity
import net.minecraft.entity.item.EntityBoat
import net.minecraft.network.play.client.CPacketPlayer

class BoatDisabler : DisablerMode("Boat") {
    private var canModify = false
    private val noGroundValue = BoolValue("${valuePrefix}NoGround", false)
    
    override fun onUpdate(event: UpdateEvent) {
        if (mc.player.ridingEntity != null) {
            mc.player.rotationPitch = (90.0).toFloat()
            mc.playerController.attackEntity(mc.player, mc.player.ridingEntity)
            getNearBoat()?.let { mc.playerController.attackEntity(mc.player, it) }
            canModify = true
            disabler.debugMessage("Destroy Boat")
        }
    }

    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (mc.player.ridingEntity != null) {
            canModify = true
        }

        if (canModify && packet is CPacketPlayer) {
            packet.onGround = !noGroundValue.get()
        }
    }

    override fun onWorld(event: WorldEvent) {
        canModify = false
    }

    override fun onEnable() {
        disabler.debugMessage("Place 2 Boats Next To Each other And Right Click To Use It!")
        canModify = false
    }

    private fun getNearBoat():Entity? {
        val entities = mc.world.loadedEntityList
        for (entity_ in entities) {
            if (entity_ is EntityBoat) {
                if (entity_ != mc.player.ridingEntity) {
                    return entity_
                }
            }
        }
        return null
    }
}
